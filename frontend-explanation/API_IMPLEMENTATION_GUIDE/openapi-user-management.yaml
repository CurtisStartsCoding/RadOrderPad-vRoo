openapi: 3.1.0
info:
  title: RadOrderPad API - User Management Focus
  description: |
    API for the RadOrderPad application, with a focus on user management,
    including user profiles, user invitation, and user location assignment.
  version: 1.0.0
  contact:
    name: RadOrderPad Support
    email: support@radorderpad.com

servers:
  - url: /api
    description: Base API path

components:
  securitySchemes:
    jwtBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login or registration

  schemas:
    # User schemas
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [admin_referring, admin_radiology, physician, admin_staff, radiologist, scheduler, super_admin]
        organization_id:
          type: integer
          format: int64
        npi:
          type: string
        specialty:
          type: string
        is_active:
          type: boolean
        email_verified:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UpdateUserProfileRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        specialty:
          type: string
        npi:
          type: string

    UpdateOrgUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        specialty:
          type: string
        npi:
          type: string
        role:
          type: string
          enum: [physician, admin_staff, radiologist, scheduler]
        isActive:
          type: boolean

    UserInviteRequest:
      type: object
      required:
        - email
        - role
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum: [physician, admin_staff, scheduler, radiologist]

    AcceptInvitationRequest:
      type: object
      required:
        - token
        - password
        - first_name
        - last_name
      properties:
        token:
          type: string
        password:
          type: string
          format: password
          minLength: 8
        first_name:
          type: string
        last_name:
          type: string

    Location:
      type: object
      properties:
        id:
          type: integer
          format: int64
        organization_id:
          type: integer
          format: int64
        name:
          type: string
        address_line1:
          type: string
        address_line2:
          type: string
        city:
          type: string
        state:
          type: string
        zip_code:
          type: string
        phone_number:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Error response
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        code:
          type: string
        status:
          type: integer
          format: int32

paths:
  # Get current user profile endpoint
  /users/me:
    get:
      tags:
        - User Management
      summary: Get current user profile
      description: |
        Retrieves the profile information for the currently authenticated user.
        This endpoint is accessible to users with any role.
      operationId: getCurrentUserProfile
      security:
        - jwtBearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/UserResponse'
              example:
                success: true
                data:
                  id: 1
                  email: "user@example.com"
                  first_name: "John"
                  last_name: "Doe"
                  role: "physician"
                  organization_id: 1
                  npi: "1234567890"
                  specialty: "Cardiology"
                  is_active: true
                  email_verified: true
                  created_at: "2025-04-01T12:00:00.000Z"
                  updated_at: "2025-04-01T12:00:00.000Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    # Update current user profile endpoint
    put:
      tags:
        - User Management
      summary: Update current user profile
      description: |
        Updates the profile information for the currently authenticated user.
        This endpoint is accessible to users with any role.
      operationId: updateCurrentUserProfile
      security:
        - jwtBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
            example:
              firstName: "John"
              lastName: "Doe"
              phoneNumber: "555-123-4567"
              specialty: "Cardiology"
              npi: "1234567890"
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/UserResponse'
              example:
                success: true
                message: "User profile updated successfully"
                data:
                  id: 1
                  email: "user@example.com"
                  first_name: "John"
                  last_name: "Doe"
                  role: "physician"
                  organization_id: 1
                  npi: "1234567890"
                  specialty: "Cardiology"
                  is_active: true
                  email_verified: true
                  created_at: "2025-04-01T12:00:00.000Z"
                  updated_at: "2025-04-01T15:45:33.112Z"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # List organization users endpoint
  /users:
    get:
      tags:
        - User Management
      summary: List organization users
      description: |
        Retrieves a list of all users belonging to the authenticated administrator's organization
        with pagination, sorting, and filtering options.
      operationId: listOrganizationUsers
      security:
        - jwtBearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [last_name, first_name, email, role, created_at, is_active]
            default: last_name
        - name: sortOrder
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: role
          in: query
          description: Filter by role
          schema:
            type: string
        - name: status
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: name
          in: query
          description: Search by name
          schema:
            type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserResponse'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                          page:
                            type: integer
                          limit:
                            type: integer
                          pages:
                            type: integer
              example:
                success: true
                data:
                  users:
                    - id: 1
                      email: "user1@example.com"
                      first_name: "John"
                      last_name: "Doe"
                      role: "physician"
                      organization_id: 1
                      npi: "1234567890"
                      specialty: "Cardiology"
                      is_active: true
                      email_verified: true
                      created_at: "2025-04-01T12:00:00.000Z"
                      updated_at: "2025-04-01T12:00:00.000Z"
                    - id: 2
                      email: "user2@example.com"
                      first_name: "Jane"
                      last_name: "Smith"
                      role: "radiologist"
                      organization_id: 1
                      npi: "0987654321"
                      specialty: "Radiology"
                      is_active: true
                      email_verified: true
                      created_at: "2025-04-01T12:00:00.000Z"
                      updated_at: "2025-04-01T12:00:00.000Z"
                  pagination:
                    total: 25
                    page: 1
                    limit: 20
                    pages: 2
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Get user by ID endpoint
  /users/{userId}:
    get:
      tags:
        - User Management
      summary: Get user by ID
      description: |
        Retrieves the profile information for a specific user by ID. This endpoint is restricted
        to organization administrators and only allows them to view users within their own organization.
      operationId: getUserById
      security:
        - jwtBearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to retrieve
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/UserResponse'
              example:
                success: true
                data:
                  id: 1
                  email: "user@example.com"
                  first_name: "John"
                  last_name: "Doe"
                  role: "physician"
                  organization_id: 1
                  npi: "1234567890"
                  specialty: "Cardiology"
                  is_active: true
                  email_verified: true
                  created_at: "2025-04-01T12:00:00.000Z"
                  updated_at: "2025-04-01T12:00:00.000Z"
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found or not in admin's organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    # Update user by ID endpoint
    put:
      tags:
        - User Management
      summary: Update user by ID
      description: |
        Updates the profile information for a specific user by ID. This endpoint is restricted
        to organization administrators and only allows them to update users within their own organization.
      operationId: updateUserById
      security:
        - jwtBearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrgUserRequest'
            example:
              firstName: "Updated"
              lastName: "Name"
              phoneNumber: "555-987-6543"
              specialty: "Neurology"
              npi: "9876543210"
              role: "physician"
              isActive: true
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/UserResponse'
              example:
                success: true
                message: "User profile updated successfully"
                data:
                  id: 9
                  email: "user@example.com"
                  first_name: "Updated"
                  last_name: "Name"
                  role: "physician"
                  organization_id: 1
                  npi: "9876543210"
                  specialty: "Neurology"
                  is_active: true
                  email_verified: true
                  created_at: "2025-04-01T12:00:00.000Z"
                  updated_at: "2025-04-24T03:15:00.000Z"
        '400':
          description: Invalid request or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found or not in admin's organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    # Deactivate user by ID endpoint
    delete:
      tags:
        - User Management
      summary: Deactivate user by ID
      description: |
        Deactivates a specific user by ID by setting their is_active flag to false.
        This is a "soft delete" that preserves the user record but prevents login and system access.
        This endpoint is restricted to organization administrators and only allows them to deactivate
        users within their own organization.
      operationId: deactivateUserById
      security:
        - jwtBearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to deactivate
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              example:
                success: true
                message: "User deactivated successfully"
        '400':
          description: Invalid user ID or attempt to deactivate own account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found or not in admin's organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User invitation endpoint
  /user-invites/invite:
    post:
      tags:
        - User Invitation
      summary: Invite user
      description: |
        Invites a new user to join the organization by sending an email with a secure invitation link.
        This endpoint is restricted to organization administrators.
      operationId: inviteUser
      security:
        - jwtBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInviteRequest'
            example:
              email: "new.user@example.com"
              role: "physician"
      responses:
        '201':
          description: Invitation sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              example:
                success: true
                message: "Invitation sent successfully"
        '400':
          description: Invalid email format or role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidEmail:
                  value:
                    success: false
                    message: "Invalid email format"
                invalidRole:
                  value:
                    success: false
                    message: "Invalid role. Valid roles are: physician, admin_staff, scheduler, radiologist"
                missingFields:
                  value:
                    success: false
                    message: "Email and role are required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Invitation already pending
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "An invitation is already pending for this email address"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Accept invitation endpoint
  /user-invites/accept-invitation:
    post:
      tags:
        - User Invitation
      summary: Accept invitation
      description: |
        Allows invited users to accept invitations and create their accounts.
        This is a public endpoint that does not require authentication.
      operationId: acceptInvitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptInvitationRequest'
            example:
              token: "invitation_token_from_email"
              password: "secure_password"
              first_name: "John"
              last_name: "Doe"
      responses:
        '200':
          description: Invitation accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserResponse'
              example:
                success: true
                token: "jwt_token_for_authentication"
                user:
                  id: 123
                  email: "john.doe@example.com"
                  first_name: "John"
                  last_name: "Doe"
                  role: "physician"
                  organization_id: 456
                  is_active: true
                  email_verified: true
                  created_at: "2025-04-23T17:30:00.000Z"
                  updated_at: "2025-04-23T17:30:00.000Z"
        '400':
          description: Invalid token, expired token, or missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidToken:
                  value:
                    success: false
                    message: "Invalid invitation token"
                expiredToken:
                  value:
                    success: false
                    message: "Invitation has expired"
                usedToken:
                  value:
                    success: false
                    message: "Invitation has already been used or expired"
                missingFields:
                  value:
                    success: false
                    message: "Token, password, first name, and last name are required"
                weakPassword:
                  value:
                    success: false
                    message: "Password must be at least 8 characters long"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "User with this email already exists"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User location assignment endpoints
  /user-locations/{userId}/locations:
    get:
      tags:
        - User Location Assignment
      summary: List user locations
      description: |
        Retrieves a list of locations assigned to a specific user within the admin's organization.
      operationId: listUserLocations
      security:
        - jwtBearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to retrieve locations for
      responses:
        '200':
          description: Locations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  locations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Location'
              example:
                locations:
                  - id: 1
                    organization_id: 1
                    name: "Main Office"
                    address_line1: "123 Main St"
                    address_line2: "Suite 100"
                    city: "Anytown"
                    state: "CA"
                    zip_code: "12345"
                    phone_number: "555-123-4567"
                    is_active: true
                    created_at: "2025-04-01T12:00:00.000Z"
                    updated_at: "2025-04-01T12:00:00.000Z"
                  - id: 2
                    organization_id: 1
                    name: "Downtown Clinic"
                    address_line1: "456 Center St"
                    address_line2: null
                    city: "Anytown"
                    state: "CA"
                    zip_code: "12345"
                    phone_number: "555-987-6543"
                    is_active: true
                    created_at: "2025-04-01T12:00:00.000Z"
                    updated_at: "2025-04-01T12:00:00.000Z"
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found or not in admin's organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Assign user to location endpoint
  /user-locations/{userId}/locations/{locationId}:
    post:
      tags:
        - User Location Assignment
      summary: Assign user to location
      description: |
        Assigns a user to a specific location within the admin's organization.
      operationId: assignUserToLocation
      security:
        - jwtBearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to assign
        - name: locationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the location to assign the user to
      responses:
        '200':
          description: User assigned to location successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: integer
                    format: int64
                  locationId:
                    type: integer
                    format: int64
              example:
                message: "User assigned to location successfully"
                userId: 1
                locationId: 2
        '400':
          description: Invalid user ID or location ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or location not found or not in admin's organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    # Unassign user from location endpoint
    delete:
      tags:
        - User Location Assignment
      summary: Unassign user from location
      description: |
        Unassigns a user from a specific location within the admin's organization.
      operationId: unassignUserFromLocation
      security:
        - jwtBearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to unassign
        - name: locationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the location to unassign the user from
      responses:
        '200':
          description: User unassigned from location successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  userId:
                    type: integer
                    format: int64
                  locationId:
                    type: integer
                    format: int64
              example:
                message: "User unassigned from location successfully"
                userId: 1
                locationId: 2
        '400':
          description: Invalid user ID or location ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or location not found, not in admin's organization, or user not assigned to location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'