/**
 * Script to test connection endpoints
 * 
 * This script tests all connection endpoints using the test relationships created by create-test-relationships.js.
 * It uses tokens generated by generate-all-role-tokens.js.
 * 
 * It tests the following endpoints:
 * - GET /api/connections
 * - GET /api/connections/requests
 * - POST /api/connections/{relationshipId}/approve
 * - POST /api/connections/{relationshipId}/reject
 * - DELETE /api/connections/{relationshipId}
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// API URL
const API_URL = process.env.API_URL || 'https://api.radorderpad.com';

// Tokens directory
const TOKENS_DIR = path.join(__dirname, 'tokens');

// Roles needed for testing
const ROLES = ['admin_referring', 'admin_radiology'];

// Store tokens for each role
const tokens = {};

// Function to load tokens from files
function loadTokens() {
  console.log('Loading tokens from files...');
  
  for (const role of ROLES) {
    const tokenFile = path.join(TOKENS_DIR, `${role}-token.txt`);
    
    if (fs.existsSync(tokenFile)) {
      tokens[role] = fs.readFileSync(tokenFile, 'utf8').trim();
      console.log(`✅ Loaded token for ${role} role`);
    } else {
      console.error(`❌ Token file not found for ${role} role: ${tokenFile}`);
      console.error(`   Run generate-all-role-tokens.js first to generate tokens`);
      process.exit(1);
    }
  }
}

// Function to make API requests
async function makeRequest(method, path, role, data = {}) {
  if (!tokens[role]) {
    console.log(`\n❌ Cannot test ${method.toUpperCase()} ${path} - No token for role ${role}`);
    return null;
  }
  
  const config = {
    method: method,
    url: `${API_URL}${path}`,
    headers: {
      'Authorization': `Bearer ${tokens[role]}`,
      'Content-Type': 'application/json',
    },
    data: data,
    // Add timeout to prevent hanging indefinitely
    timeout: 30000, // 30 seconds
  };
  
  console.log(`\n🔍 Testing ${method.toUpperCase()} ${path} with ${role} role...`);
  try {
    const response = await axios(config);
    console.log(`✅ PASSED: ${method.toUpperCase()} ${path}`);
    console.log('Status:', response.status);
    console.log('Response Data:', JSON.stringify(response.data, null, 2));
    return response.data;
  } catch (error) {
    console.log(`❌ FAILED: ${method.toUpperCase()} ${path}`);
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Error Data:', JSON.stringify(error.response.data, null, 2));
    } else if (error.request) {
      console.log('Error: No response received', error.message);
    } else {
      console.log('Error:', error.message);
    }
    return null;
  }
}

// Test functions for each endpoint
async function testListConnections() {
  console.log('\n--- Testing List Connections ---');
  return await makeRequest('get', '/api/connections', 'admin_referring');
}

async function testListIncomingRequests() {
  console.log('\n--- Testing List Incoming Requests ---');
  return await makeRequest('get', '/api/connections/requests', 'admin_referring');
}

async function testApproveConnection(relationshipId) {
  console.log(`\n--- Testing Approve Connection (ID: ${relationshipId}) ---`);
  return await makeRequest('post', `/api/connections/${relationshipId}/approve`, 'admin_radiology', {});
}

async function testRejectConnection(relationshipId) {
  console.log(`\n--- Testing Reject Connection (ID: ${relationshipId}) ---`);
  return await makeRequest('post', `/api/connections/${relationshipId}/reject`, 'admin_radiology', {});
}

async function testTerminateConnection(relationshipId) {
  console.log(`\n--- Testing Terminate Connection (ID: ${relationshipId}) ---`);
  return await makeRequest('delete', `/api/connections/${relationshipId}`, 'admin_radiology', {});
}

// Main function to run all tests
async function runTests() {
  console.log('=== TESTING CONNECTION ENDPOINTS ===');
  console.log(`API URL: ${API_URL}`);
  console.log('===================================\n');
  
  // Load tokens
  loadTokens();
  
  // Test list connections
  await testListConnections();
  
  // Test list incoming requests
  await testListIncomingRequests();
  
  // Test reject connection with relationship ID 2 (pending)
  console.log('\n--- Using relationship ID 2 for testing reject endpoint ---');
  await testRejectConnection(2);
  
  // Test terminate connection with relationship ID 1 (active)
  console.log('\n--- Using relationship ID 1 for testing terminate endpoint ---');
  await testTerminateConnection(1);
  
  console.log('\n=== CONNECTION ENDPOINT TESTING COMPLETE ===');
}

// Run the tests
runTests().catch(error => {
  console.error('\n--- UNEXPECTED ERROR ---');
  console.error(error);
  process.exit(1);
});